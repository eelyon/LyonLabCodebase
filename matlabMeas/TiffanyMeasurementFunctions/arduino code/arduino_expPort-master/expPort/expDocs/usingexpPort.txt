expPort - An arduino library of functions to support an I2C bus expansion
          port using the Microchip MCP23016 IC.

The MCP23016 is a dual 8-bit port IC that sits on the I2C bus. The chip
registers are arranged so that they are easily accessed in pairs to make
a 16-bit port. This library has functions for configuring the 16-bit port
as a word I/O device, or/and for individual bit I/O, thus (somewhat)
replicating the arduino pin-access I/O.

See the MCP23016 data sheet for detailed pin descriptions. Briefly, each
pin can source/sink 24 mA (similar to the arduino digital pins), there are
no internal pullup resistors, and each pin can be individually configured
as input or output.

To use the library, place the expPort folder in your arduino 
../sketchbook/libraries/ folder. The sketch using the library needs to
add the include statements:

#include <Wire.h>        // the i2c bus I/O is used by expPort
#include <expPort.h>     // brings in the expansion port functions

Then, a pin i/o object is created for each pin to use. Alternatively a
word i/o object may be created if whole words are to be written/read. See
the example sketches. Because the i2c connection must write the port bits
all at once (either 8 or 16 at a time), bit i/o is implemented by keeping
in-memory images of the GPIO and IODIR registers updated as each bit is
accessed. Consequently, i2c bus activity occurs for all accesses which may
be a concern for faster operations.

The library contains the following 15 functions:

1.	expPort( int i2caddr, byte pinNumber );
		// constructor - single bit


2.	expPort( int i2caddr, word initIODIR, word initGPIO );
		// constructor - whole word

The i2caddr for the MCP23016 is 0x20 (arduino-style, 7-bit, right-
justified) plus the 3-bit number placed on the A0, A1, A3 chip address
pins. The single-bit constructor includes configuring the IODIR and GPIO
registers (and corresponding in-memory images) to the power-up reset state
which is all pins inputs, output latch zeroed. The word i/o constructor
allows the user to specify the initial values for these registers.

3. 	void begin( void );
		// initial setup

begin( ) must be called in setup( ) for each object declared, as it sets
up the object's internal variables--for example, the pin number associated
with a single-bit object. If both the word i/o and bit i/o objects are to
be used, care must be taken to avoid conflicting setup of the in-memory 
register images. That is, the initIODIR and initGPIO in the word object
constructor should be set to the power-up-reset values 0xffff and 0x0000
respectively, which are the values the single-bit constructor will set.

begin( ) also calls Wire.begin( ) to attach the I2C i/o library for use
by expPort.


4.	word getIODIR( void );
5.	void setIODIR( word iodir );
6.	word getGPIO( void );
7.	void setGPIO( word gpioreg );
		// word access functions

These 4 functions allow reading and writing the byte pairs as words from/to
the respective expansion port registers


8.	bool getPin( byte pinNum );
9.	void setPin( byte pinNum, bool level );
10.	bool getPinMode( byte pinNum );
11.	void setPinMode( byte pinNum, byte pinMode );

12.	bool in( void );
13.	void set( bool level );
14.	void setMode( byte pinMode );
		// bit access functions

This set of functions somewhat overlap in capability. The pin i/o functions
8..11 are meant to be used with the word i/o objects and require specifying
the pin number in each call. The functions 12..14 are meant to be used with
the single-bit objects where the pin designation is 'built-in' to the
object at construction, thus simplifying the call a little. The single-bit
object is meant to support choosing meaningfull names for a given pin
function. For instance a light connected to bit 3 might have:

	expPort light( 0x20, 3 )  // construct light control object

	setup( ) {
		light.begin( )
		.
		.


then in the sketch:

	light.set( ON )   // turn on light
		.
		.
		.
	light.set( OFF )  // light off



The expPort include file also defines a few useful constants:

#define IN 1
#define OUT 0


